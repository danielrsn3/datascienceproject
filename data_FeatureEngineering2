####################################### Feature Engineering #######################################
import pandas as pd
vehicles = pd.read_csv('Data/vehicles_clean.csv') # Uploading the data
vehicles.dtypes # Display the data types of each column
from data_preprocessing import apply_data_types
apply_data_types(vehicles)
vehicles.dtypes # Display the data types of each column


##### Creating new variables #####
# Creating new variable: years_old
vehicles['year'] = vehicles['year'].astype('Int64') # Treat year as numeric to be able to substract
vehicles['years_old'] = 2021 - vehicles['year']
vehicles.drop(columns=['year'], inplace=True) # deleting the original year column
# Creating Ranges for 'odometer'
    # Define the ranges for the bins
bins = [0, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000, 110000, 120000, 130000, 140000, 150000, 160000, 170000, 180000, 190000, 200000, float('inf')]
    # Define labels for the bins
labels = ['0-10000', '10000-20000', '20000-30000', '30000-40000', '40000-50000', '50000-60000', '60000-70000', '70000-80000', '80000-90000', '90000-100000', '100000-110000', '110000-120000', '120000-130000', '130000-140000', '140000-150000', '150000-160000', '160000-170000', '170000-180000', '180000-190000', '190000-200000', '200000+']
    # Create a new column 'odometer_range' with the binned values
vehicles['odometer_range'] = pd.cut(vehicles['odometer'], bins=bins, labels=labels, right=False)
    # Drop the old 'odometer' variable
vehicles.drop(columns=['odometer'], inplace=True)
    # Display the count of values in each bin
print(vehicles['odometer_range'].value_counts())
vehicles['odometer_range'] = vehicles['odometer_range'].astype('category')
vehicles.dtypes


####### Lumping ####### (other)
# Manufacturer lumping
mf = vehicles_nona['manufacturer'].value_counts()
vehicles_nona['manufacturer'] = vehicles_nona['manufacturer'].apply(lambda s: s if str(s) in mf[:20] else 'others')
vehicles_nona['manufacturer'].value_counts()
vehicles_nona['manufacturer'] = vehicles_nona['manufacturer'].astype('category')
# Paint color lumping
paint_color = vehicles_nona['paint_color'].value_counts()
vehicles_nona['paint_color'] = vehicles_nona['paint_color'].apply(lambda s: s if str(s) in paint_color[:9] else 'others')
vehicles_nona['paint_color'].value_counts()
vehicles_nona['paint_color'] = vehicles_nona['paint_color'].astype('category')


###### ONE HOT ENCODING ######
categorical_columns = ['manufacturer', 'condition', 'cylinders', 'fuel_type', 'transmission', 'drive', 'car_type', 'paint_color', 'state', 'years_old', 'odometer_range']
# Apply one-hot encoding
vehicles_nona = pd.get_dummies(vehicles_nona, columns=categorical_columns, dtype=int)
# Checking
print(vehicles_nona.head())
vehicles_nona.dtypes


###### Removing zero and near zero variance #####
from sklearn.feature_selection import VarianceThreshold
selector = VarianceThreshold(threshold=0.01)  # Adjust threshold as needed
vehicles_nona_selected = selector.fit_transform(vehicles_nona)
# vehicles_selected will contain only the features with variance above the threshold
# Creating df
vehicles_nona = pd.DataFrame(vehicles_nona_selected, columns=vehicles_nona.columns[selector.get_support()])


####### Saving as a new csv file #######
vehicles_nona.to_csv('Data/vehicles_fe_models.csv', index=False)